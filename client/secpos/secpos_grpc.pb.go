// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: secpos.proto

package secpos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecurityPosisionSettlementService_GetOneSecurityPosition_FullMethodName               = "/secpos.SecurityPosisionSettlementService/GetOneSecurityPosition"
	SecurityPosisionSettlementService_GetOneSecurityPositionWithAllDetails_FullMethodName = "/secpos.SecurityPosisionSettlementService/GetOneSecurityPositionWithAllDetails"
	SecurityPosisionSettlementService_GetHistoricalFromOneSecurityPosition_FullMethodName = "/secpos.SecurityPosisionSettlementService/GetHistoricalFromOneSecurityPosition"
	SecurityPosisionSettlementService_GetAllSecurityPositionFromIsin_FullMethodName       = "/secpos.SecurityPosisionSettlementService/GetAllSecurityPositionFromIsin"
)

// SecurityPosisionSettlementServiceClient is the client API for SecurityPosisionSettlementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Seems to be the same but it is not.
// Allow user to Get Clear, and different functions to have
// Business control & business logic different.
type SecurityPosisionSettlementServiceClient interface {
	GetOneSecurityPosition(ctx context.Context, in *SecPosRequest, opts ...grpc.CallOption) (*SecPosResponse, error)
	GetOneSecurityPositionWithAllDetails(ctx context.Context, in *SecPosRequest, opts ...grpc.CallOption) (*SecPosResponse, error)
	GetHistoricalFromOneSecurityPosition(ctx context.Context, in *SecPosRequest, opts ...grpc.CallOption) (*SecPosResponse, error)
	GetAllSecurityPositionFromIsin(ctx context.Context, in *SecPosRequest, opts ...grpc.CallOption) (*SecPosResponse, error)
}

type securityPosisionSettlementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityPosisionSettlementServiceClient(cc grpc.ClientConnInterface) SecurityPosisionSettlementServiceClient {
	return &securityPosisionSettlementServiceClient{cc}
}

func (c *securityPosisionSettlementServiceClient) GetOneSecurityPosition(ctx context.Context, in *SecPosRequest, opts ...grpc.CallOption) (*SecPosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecPosResponse)
	err := c.cc.Invoke(ctx, SecurityPosisionSettlementService_GetOneSecurityPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityPosisionSettlementServiceClient) GetOneSecurityPositionWithAllDetails(ctx context.Context, in *SecPosRequest, opts ...grpc.CallOption) (*SecPosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecPosResponse)
	err := c.cc.Invoke(ctx, SecurityPosisionSettlementService_GetOneSecurityPositionWithAllDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityPosisionSettlementServiceClient) GetHistoricalFromOneSecurityPosition(ctx context.Context, in *SecPosRequest, opts ...grpc.CallOption) (*SecPosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecPosResponse)
	err := c.cc.Invoke(ctx, SecurityPosisionSettlementService_GetHistoricalFromOneSecurityPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityPosisionSettlementServiceClient) GetAllSecurityPositionFromIsin(ctx context.Context, in *SecPosRequest, opts ...grpc.CallOption) (*SecPosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecPosResponse)
	err := c.cc.Invoke(ctx, SecurityPosisionSettlementService_GetAllSecurityPositionFromIsin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityPosisionSettlementServiceServer is the server API for SecurityPosisionSettlementService service.
// All implementations must embed UnimplementedSecurityPosisionSettlementServiceServer
// for forward compatibility.
//
// Seems to be the same but it is not.
// Allow user to Get Clear, and different functions to have
// Business control & business logic different.
type SecurityPosisionSettlementServiceServer interface {
	GetOneSecurityPosition(context.Context, *SecPosRequest) (*SecPosResponse, error)
	GetOneSecurityPositionWithAllDetails(context.Context, *SecPosRequest) (*SecPosResponse, error)
	GetHistoricalFromOneSecurityPosition(context.Context, *SecPosRequest) (*SecPosResponse, error)
	GetAllSecurityPositionFromIsin(context.Context, *SecPosRequest) (*SecPosResponse, error)
	mustEmbedUnimplementedSecurityPosisionSettlementServiceServer()
}

// UnimplementedSecurityPosisionSettlementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecurityPosisionSettlementServiceServer struct{}

func (UnimplementedSecurityPosisionSettlementServiceServer) GetOneSecurityPosition(context.Context, *SecPosRequest) (*SecPosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneSecurityPosition not implemented")
}
func (UnimplementedSecurityPosisionSettlementServiceServer) GetOneSecurityPositionWithAllDetails(context.Context, *SecPosRequest) (*SecPosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneSecurityPositionWithAllDetails not implemented")
}
func (UnimplementedSecurityPosisionSettlementServiceServer) GetHistoricalFromOneSecurityPosition(context.Context, *SecPosRequest) (*SecPosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoricalFromOneSecurityPosition not implemented")
}
func (UnimplementedSecurityPosisionSettlementServiceServer) GetAllSecurityPositionFromIsin(context.Context, *SecPosRequest) (*SecPosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSecurityPositionFromIsin not implemented")
}
func (UnimplementedSecurityPosisionSettlementServiceServer) mustEmbedUnimplementedSecurityPosisionSettlementServiceServer() {
}
func (UnimplementedSecurityPosisionSettlementServiceServer) testEmbeddedByValue() {}

// UnsafeSecurityPosisionSettlementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityPosisionSettlementServiceServer will
// result in compilation errors.
type UnsafeSecurityPosisionSettlementServiceServer interface {
	mustEmbedUnimplementedSecurityPosisionSettlementServiceServer()
}

func RegisterSecurityPosisionSettlementServiceServer(s grpc.ServiceRegistrar, srv SecurityPosisionSettlementServiceServer) {
	// If the following call pancis, it indicates UnimplementedSecurityPosisionSettlementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecurityPosisionSettlementService_ServiceDesc, srv)
}

func _SecurityPosisionSettlementService_GetOneSecurityPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecPosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPosisionSettlementServiceServer).GetOneSecurityPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityPosisionSettlementService_GetOneSecurityPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPosisionSettlementServiceServer).GetOneSecurityPosition(ctx, req.(*SecPosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityPosisionSettlementService_GetOneSecurityPositionWithAllDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecPosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPosisionSettlementServiceServer).GetOneSecurityPositionWithAllDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityPosisionSettlementService_GetOneSecurityPositionWithAllDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPosisionSettlementServiceServer).GetOneSecurityPositionWithAllDetails(ctx, req.(*SecPosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityPosisionSettlementService_GetHistoricalFromOneSecurityPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecPosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPosisionSettlementServiceServer).GetHistoricalFromOneSecurityPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityPosisionSettlementService_GetHistoricalFromOneSecurityPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPosisionSettlementServiceServer).GetHistoricalFromOneSecurityPosition(ctx, req.(*SecPosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityPosisionSettlementService_GetAllSecurityPositionFromIsin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecPosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPosisionSettlementServiceServer).GetAllSecurityPositionFromIsin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityPosisionSettlementService_GetAllSecurityPositionFromIsin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPosisionSettlementServiceServer).GetAllSecurityPositionFromIsin(ctx, req.(*SecPosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecurityPosisionSettlementService_ServiceDesc is the grpc.ServiceDesc for SecurityPosisionSettlementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecurityPosisionSettlementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "secpos.SecurityPosisionSettlementService",
	HandlerType: (*SecurityPosisionSettlementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOneSecurityPosition",
			Handler:    _SecurityPosisionSettlementService_GetOneSecurityPosition_Handler,
		},
		{
			MethodName: "GetOneSecurityPositionWithAllDetails",
			Handler:    _SecurityPosisionSettlementService_GetOneSecurityPositionWithAllDetails_Handler,
		},
		{
			MethodName: "GetHistoricalFromOneSecurityPosition",
			Handler:    _SecurityPosisionSettlementService_GetHistoricalFromOneSecurityPosition_Handler,
		},
		{
			MethodName: "GetAllSecurityPositionFromIsin",
			Handler:    _SecurityPosisionSettlementService_GetAllSecurityPositionFromIsin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secpos.proto",
}
